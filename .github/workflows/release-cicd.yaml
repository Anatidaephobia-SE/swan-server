name: Swan Release CI/CD

on:

  create:

  pull_request:
    branches:
      - test-release-**

env:
  COMPOSE_FILE: alpha-docker-compose.yaml
  SWAN_IMAGE: swan-prod
  SWAN_IMAGE_WITH_URL: ${{ secrets.PRODEUCTION_REGISTRY_URL }}/release/swan-prod


jobs:
  build:

    runs-on: ubuntu-latest
    if: ${{ github.ref != 'refs/heads/test-release-**' || contains(github.ref, 'refs/heads/test-release') }} #for pull request and create

    services:
      postgres:
        image: postgres:11
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: github_actions
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432/tcp
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v1
      with:
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7
    - name: psycopg2 prerequisites
      run: sudo apt-get install -y libpq-dev
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Run migrations
      run: |
        python manage.py makemigrations
        python manage.py migrate
      env: 
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_DB: github_actions
        POSTGRES_HOST_AUTH_METHOD: trust
        POSTGRES_HOST: localhost
        POSTGRES_PORT: ${{ job.services.postgres.ports[5432] }}
        SECRET_KEY: ${{ secrets.PRODEUCTION_SECRET_KEY }}
    - name: Run tests
      run: python manage.py test
      env: 
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_DB: github_actions
        POSTGRES_HOST_AUTH_METHOD: trust
        POSTGRES_HOST: localhost
        POSTGRES_PORT: ${{ job.services.postgres.ports[5432] }}
        SECRET_KEY: ${{ secrets.PRODEUCTION_SECRET_KEY }}

    - name: add swan service env
      run: |
        echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> swan.env
        echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> swan.env
        echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}" >> swan.env
        echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}" >> swan.env
        echo "SECRET_KEY=${{ secrets.PRODEUCTION_SECRET_KEY }}" >> swan.env

    - name: add postgres service env
      run: |
        echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> pg.env
        echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> pg.env
        echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> pg.env

    - name: add pgadmin service env
      run: |
        echo "PGADMIN_DEFAULT_EMAIL=${{ secrets.PGADMIN_DEFAULT_EMAIL }}" >> pgadmin.env
        echo "PGADMIN_DEFAULT_PASSWORD=${{ secrets.PGADMIN_DEFAULT_PASSWORD }}" >> pgadmin.env
        echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> pgadmin.env


    - name: Build image
      run: |
        docker-compose -f ${{ env.COMPOSE_FILE }} build
    
    - name: Create event tag
      if: ${{ github.ref == 'refs/heads/test-release-**' }}
      run: |
        export DOCKER_ALPHA_TAG=${GITHUB_REF#refs/heads/}
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
    
    - name: Pull request event tag
      if: ${{ github.event_name == 'pull_request' }}
      run: |
        export DOCKER_ALPHA_TAG=${{ github.base_ref }}
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}

    - name: Push image
      run: |
        docker login ${{ secrets.PRODEUCTION_REGISTRY_URL }} --username "${{ secrets.PRODEUCTION_REGISTRY_USERNAME }}" --password "${{ secrets.PRODEUCTION_REGISTRY_PASSWORD }}"
        docker tag ${{ env.SWAN_IMAGE }} ${{ env.SWAN_IMAGE_WITH_URL }}:$DOCKER_ALPHA_TAG
        docker push ${{ env.SWAN_IMAGE_WITH_URL }}:$DOCKER_ALPHA_TAG
        